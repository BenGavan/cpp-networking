int initial_version() {
    std::string requestString = "GET / HTTP/1.1";

    int s;
    int nbytes;
    struct sockaddr_in sa;
    struct hostent *he;
    char buffer[BUFSIZ];
    int port = 8000;

    s = socket(PF_INET, SOCK_STREAM, 0);
    if (s < 0) {
        perror("socket");
        return 1;
    }

    bzero(&sa, sizeof sa);

    sa.sin_family = AF_INET;
    sa.sin_port = htons(port);  // port on the server we are trying to connect to 

    std::string host_str = "localhost";
    const char* host = host_str.c_str();
    // host = "simbad.u-strasbg.fr";
    he = gethostbyname(host);
    if (he == NULL) {
        std::cout << "Invalid host name" << std::endl;
        herror(host);
        return 2;
    }

    std::cout << "host name: " << he->h_name;
    std::cout << "\nhost address type: " << he->h_addrtype;
    std::cout << "\nhost address length: " << he->h_length;
    std::cout << std::endl;

    bcopy(he->h_addr_list[0], &sa.sin_addr, he->h_length);

    std::cout << "s_addr: " << sa.sin_addr.s_addr << std::endl;
    std::cout << "Connecting to socket" << std::endl;

    if (connect(s, (struct sockaddr *) &sa, sizeof sa) < 0) {
        perror("connect");
        close(s);
        return 2;
    }

    std::cout << "Write data" << std::endl;

    std::string header_str = make_header_str("GET", "/", host_str);
    
    // "GET / HTTP/1.1\r\nHost: localhost\r\n\r\n";
    
    const char* header = header_str.c_str();
    // char *header = "GET /simbad/sim-coo?output.format=ASCII&Coord=12%2030%20+10%2020&Radius=5&Radius.unit=arcmin&obj.pmsel=on&object.plxsel=on HTTP/1.1\r\nHost: simbad.u-strasbg.fr\r\n\r\n";
    send(s, header, strlen(header), 0);

    // FILE* outSocket = fdopen(s, "w");
    // write(s, "GET / HTTP/1.1", sizeof "GET / HTTP/1.1");

    // fprintf(outSocket, "GET / HTTP/1.1");
 
    std::cout << "Reading data\n" << std::endl;

    // TODO: Need to parse response
    // TODO: Parse header
    // TODO: Parse chuncked body

    /* Read the response. */
    printf("buffer size = %d\n\n", BUFSIZ);
    int nbytes_total = 0;
    while ((nbytes_total = read(s, buffer, BUFSIZ)) > 0) {
        // fprintf(stderr, "debug: after a read\n");
        write(STDOUT_FILENO, buffer, nbytes_total);
    }

    printf("\nnbytes_total = %d\n\n", nbytes_total);

    // for (int i=0; i<6; i++) {
    //     int byte_count = recv(s, buffer, sizeof(buffer)-1,0); // <-- -1 to leave room for a null terminator
    //     printf("\n***\nbyte count  = %d\n***\n", byte_count);
    //     // printf("buffer size = %d\n", BUFSIZ);
    //     buffer[byte_count] = 0;  // add the null terminator

    //     // printf("%s",buffer);

    //     // int i = 0;
    //     // while ((bytes = read(s, buffer, BUFSIZ) > 0)) {
    //     //     // write(1, buffer, bytes);
    //     //     // std::cout << bytes << std::endl;
    //     //     std::cout << "i      = " << i << std::endl;
    //     //     std::cout << "bytes  = " << bytes << std::endl;
    //     //     std::cout << "buffer = " << buffer << std::endl;
    //     //     i++;
    //     // }

    //     // std::cout << "Finished reading" << std::endl;
    //     std::cout << buffer;
        
    //     // std::cout << buffer << std::endl;
    // }
    // std::cout << std::endl;
    
    close(s);
}